//NOTE: the general procedure for running a new experiment is to ensure that a human-crafted example can be written in N lines first!

uses data.String
uses FeatureBuilder

uses UnitTest

component provides App requires io.Output out, data.IntUtil iu, data.StringUtil stringUtil, io.FileSystem fileSystem, os.SystemInfo sysInfo, doc.DocBuilder, Generator, composition.RecursiveLoader loader, search.CodeSearch:GlobalRandom codeSearch, FeatureBuilder featureBuilder {

	char[] findPackage(String searchPaths[], char p[])
		{
		char test[] = stringUtil.implode(stringUtil.explode(p, "."), "/")
		test = new char[](test, ".dn")

		if (fileSystem.exists(test))
			return test

		//try search paths
		for (int i = 0; i < searchPaths.arrayLength; i++)
			{
			char result[] = new char[](searchPaths[i].string, "/resources/", test)

			out.println("test: '$result'")

			if (fileSystem.exists(result))
				{
				return result
				}
			}

		//try central source tree
		char result[] = new char[](sysInfo.getVariable("DANA_HOME"), "/resources/", test)

		out.println("test: '$result'")

		if (fileSystem.exists(result))
			return result

		return null
		}

	FunctionPrototype[] getFunctionsFrom(String searchDirectories[], char package[])
		{
		FunctionPrototype result[]

		String parts[] = stringUtil.explode(package, ".")
		char typeName[] = parts[parts.arrayLength-1].string

		char filepath[] = findPackage(searchDirectories, package)

		if (filepath != null)
			{
			// - parse the interface
			DocBuilder db = new DocBuilder()
			db.parseFile(filepath)

			ParsedFiles pf = db.getParsedFiles()

			for (int i = 0; i < pf.primaryFiles.arrayLength; i++)
				{
				TypeDef xtypes[] = pf.primaryFiles[i].types

				for (int j = 0; j < xtypes.arrayLength; j ++)
					{
					if (xtypes[j].class == TypeDef.OBJECT && xtypes[j].name == typeName)
						{
						//work through all functions

						InterfaceDef id = xtypes[j]

						for (int k = 0; k < id.functions.arrayLength; k++)
							{
							FunctionPrototype nfp = new FunctionPrototype(id.functions[k].name, xtypes[j].name, id.functions[k].returnType)

							// - add parameters
							for (int q = 0; q < id.functions[k].params.arrayLength; q++)
								{
								char fname[] = id.functions[k].params[q].displayName
								bool array = stringUtil.find(fname, "[]") != StringUtil.NOT_FOUND

								if (array)
									nfp.parameterTypes = new String[](nfp.parameterTypes, new String("$(id.functions[k].params[q].type)[]"))
									else
									nfp.parameterTypes = new String[](nfp.parameterTypes, new String(id.functions[k].params[q].type))
								}

							result = new FunctionPrototype[](result, nfp)
							}
						}
					}
				}
			}

		return result
		}

	void printLines(String lines[])
		{
		for (int i = 0; i < lines.arrayLength; i++)
			{
			out.println(lines[i].string)
			}
		}

	void printCompressedOption(Option node)
		{
		for (int j = 0; j < node.lines.arrayLength; j++)
			{
			out.print("$(iu.intToString(node.lines[j])).")
			}

		out.println("")
		}

	void printCompressedOptions(Option nodes[])
		{
		for (int i = 0; i < nodes.arrayLength; i++)
			{
			for (int j = 0; j < nodes[i].lines.arrayLength; j++)
				{
				out.print("$(iu.intToString(nodes[i].lines[j])).")
				}

			out.println("")
			}
		}

	/*
	void search_batchedSample(char buildFolder[], char buildInterface[], FunctionData functionList[], Generator generator, UnitTest ut, int interSampleDistance, int sampleSize, int threadCount)
		{
		//first get any solutions for all functions of the interface, so that the overall component will compile correctly

		FunctionSource foundFunctions[] = primeFunctions(functionList, generator)

		//start at index 0, and grab the given sampleSize
		// - then jump ahead (from 0) by interSampleDistance, and collect another sample, etc.
		// - do this until the returned set of options has less members than the sampleSize, indicating we're at the end

		//TODO
		}
	*/

	int App:main(AppParam params[])
		{
		char buildFolder[] = "tmp"

		/* char unitTests[] = "input_addition.txt"
		char testProgram[] = "UnitTest_Add.o"
		char buildInterface[] = "IntFunction"
		int lineCount = 1 */


		char unitTests[] = "input_search_count.txt"
		char testProgram[] = "UnitTest_SearchCount.o"
		char buildInterface[] = "Int_IntArray_Int_Function"
		int lineCount = 3//16 //17 //7

		VariableTypes varTypes = new VariableTypes(/*totalInts*/2, /*totalDecs*/1, /*totalChars*/0, /*totalBools*/0, /*totalDatas*/0, /*totalIntArrs*/0, /*totalDecArrs*/0, /*totalCharArrs*/0, /*totalBoolArrs*/0, /*totalDataArrs*/0, /*totalObjs*/0, /*totalObjArrs*/0, /*totalFuncArrs*/0)
		AssignmentTypes asmtTypes = new AssignmentTypes(/*totalVarToLit*/0, /*totalVarToVar*/0, /*totalVarToInd*/0, /*totalVarToField*/0, /*totalVarToData*/0, /*totalVarToObj*/0, /*totalVarToArrConcat*/0,
			/*totalVarToArrClone*/0, /*totalVarToDataClone*/0, /*totalVarToFunc*/0, /*totalVarToGOFunc*/0, /*totalVarToLOFunc*/0,
			/*totalIndToLit*/0, /*totalIndToVar*/0, /*totalIndToInd*/0, /*totalIndToField*/0, /*totalIndToData*/0, /*totalIndToObj*/0, /*totalIndToArrConcat*/0,
			/*totalIndToArrClone*/0, /*totalIndToDataClone*/0, /*totalIndToFunc*/0, /*totalIndToGOFunc*/0, /*totalIndToLOFunc*/0,
			/*totalDataToLit*/0, /*totalDataToVar*/0, /*totalDataToInd*/0, /*totalDataToField*/0, /*totalDataToData*/0, /*totalDataToObj*/0, /*totalDataToArrConcat*/0,
			/*totalDataToArrClone*/0, /*totalDataToDataClone*/0, /*totalDataToFunc*/0, /*totalDataToGOFunc*/0, /*totalDataToLOFunc*/0)
//		OperatorTypes opTypes = new OperatorTypes(/*totalAdd*/2, /*totalSub*/0, /*totalMul*/0, /*totalDiv*/0, /*totalMod*/0, /*totalBOr*/0, /*totalBAnd*/0, /*totalBXor*/0, /*totalBFlip*/0, /*totalLShift*/0,
//			/*totalRShift*/0, /*totalSEqu*/0, /*totalSNotEqu*/0, /*totalGreater*/0, /*totalLess*/2, /*totalGreaterEqu*/0, /*totalLessEqu*/0, /*totalNot*/0, /*totalEqu*/1, /*totalNotEqu*/0)

		/* Provided feature vector for counting program */
		/* PIFixed providedFeatures = new PIFixed(lineCount, 21, 6, 0, 8, 1, 1, 0, 1, 7, 1, 1, null, 0, 0, 0) */
		/* PIFixed providedFeatures = new PIFixed(lineCount, lineCount, 6, 0, 8, 1, 1, 0, 0, 0, 0, 1, null, 0, 0, 0) */
//		PIFixed providedFeatures = new PIFixed(/*totalLines*/lineCount, /*blankLines*/0, /*totalVars*/0, /*nonInputVars*/0, /*totalAssignments*/1, /*totalWhiles*/0, /*totalIfs*/0, /*totalFunctionCalls*/0, /*totalReturns*/0, /*aveLoopLength*/0, /*aveWhileLength*/0, /*highestNestingLevel*/0, /*remainingLinesInBlock*/null, /*totalLoopLength*/0, /*totalWhileLength*/0, /*minimumLinesToComplete*/0)
		PIFixed providedFeatures = new PIFixed(/*totalLines*/lineCount, /*blankLines*/0, /*totalVars*/lineCount, /*varTypes*/varTypes, /*nonInputVars*/0, /*totalAssignments*/0, /*asmtTypes*/asmtTypes, /*totalWhiles*/0, /*totalIfs*/0, /*totalFunctionCalls*/0, /*totalReturns*/0, /*aveLoopLength*/0,
			/*aveWhileLength*/0, /*highestNestingLevel*/0, /*remainingLinesInBlock*/null, /*totalLoopLength*/0, /*totalWhileLength*/0, /*minimumLinesToComplete*/0)

		int maxDeviation = 0 // Change this as neccesary.
		// pass this to FeatureBuilder
		featureBuilder.setProvidedFeatures(providedFeatures)
		featureBuilder.setMaxDeviation(maxDeviation)

		char exampleImplementation[] = null //we might take "hints" from this, e.g. global state, which functions are self-contained ...
		String auxFiles[]// = new String[](new String("data.StringUtil"))
		String searchDirectories[] = new String[](new String(buildFolder))

		IDC utc = loader.load(testProgram).mainComponent
		UnitTest ut = new UnitTest("tmp/$unitTests") from utc :< UnitTest

		if (ut == null) return 1

		// -- initialise the code generator and search for implementations --

		// NOTE: pass the provided feature vector here?
		Generator generator = new Generator(searchDirectories)

		generator.setProvidedInterface(buildInterface)

		//generator.addResource("data.StringUtil")

		for (int i = 0; i < auxFiles.arrayLength; i++)
			{
			generator.addGlobalAPI(auxFiles[i].string)
			}

		// - grab the type of the provided interface, and enumerate its functions, to search for implementations of each one in turn

		FunctionPrototype functionList[] = getFunctionsFrom(searchDirectories, buildInterface)
		/* featureBuilder.setFunctionPrototype(functionList[]) */

		FunctionData functionDefs[]

		for (int i = 0; i < functionList.arrayLength; i++)
			{
			functionDefs = new FunctionData[](functionDefs, new FunctionData(functionList[i].name, false, lineCount, functionList[i]))
			}

		out.println(" - searching...")

		// - now find all independent functions

		// NOTE: pass feature vector here
		codeSearch.search(buildFolder, buildInterface, functionDefs, generator, ut, featureBuilder)

		//TODO: find all "linked" functions

		return 0
		}

	}
