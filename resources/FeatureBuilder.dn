uses data.String
uses FunctionData
uses data.adt.Stack

data FeatureVector {
  int totalLines
}

data VariableTypes {
  int totalInts
  int totalDecs
  int totalChars
  int totalBools
  int totalDatas
}

data AssignmentTypes {
  // LHS = variable
  int totalVarToLit
  int totalVarToVar
  int totalVarToInd
  int totalVarToField
  int totalVarToData
  int totalVarToObj
  int totalVarToArrConcat
  int totalVarToArrClone
  int totalVarToDataClone
  int totalVarToFunc
  int totalVarToGOFunc
  int totalVarToLOFunc
  // LHS = variable indices
  int totalIndToLit
  int totalIndToVar
  int totalIndToInd
  int totalIndToField
  int totalIndToData
  int totalIndToObj
  int totalIndToArrConcat
  int totalIndToArrClone
  int totalIndToDataClone
  int totalIndToFunc
  int totalIndToGOFunc
  int totalIndToLOFunc
  // LHS = data
  int totalDataToLit
  int totalDataToVar
  int totalDataToInd
  int totalDataToField
  int totalDataToData
  int totalDataToObj
  int totalDataToArrConcat
  int totalDataToArrClone
  int totalDataToDataClone
  int totalDataToFunc
  int totalDataToGOFunc
  int totalDataToLOFunc
}

data OperatorTypes {
  int totalAdd
  int totalSub
  int totalMul
  int totalDiv
  int totalMod
  int totalBOr
  int totalBAnd
  int totalBXor
  int totalBFlip
  int totalLShift
  int totalRShift
  int totalSEqu
  int totalSNotEqu
  int totalGreater
  int totalLess
  int totalGreaterEqu
  int totalLessEqu
  int totalNot
  int totalEqu
  int totalNotEqu
}

// Position-independent features, fixed number of features
data PIFixed extends FeatureVector {
  /* int nonBlankLines */
  int blankLines
  int totalVars
  VariableTypes varTypes
  /* int totalInts
  int totalDecs
  int totalChars
  int totalBools
  int totalDatas */
  // Number of variables used not of input Variable type
  int nonInputVars
  // NOTE: May need to make this a 'total' rather than average for updating each line.
  // Average number of inter-variable lines
  // int aveVarInteractions
  //int totalVarInteractions // NOTE: Difficult to work out, for now just use total assignments.
  int totalAssignments
  AssignmentTypes asmtTypes
  int totalWhiles
  int totalIfs
  int totalFunctionCalls
  int totalReturns // Can there be more than one?
  // Average length of while loop
  int aveLoopLength
  // Average length of if statements
  int aveWhileLength
  int highestNestingLevel
  // -- temporary values for getting highestNestingLevel and aveLoopLenth --
  Stack remainingLinesInBlock // Stack representing the lines remaining to be filled in each control block.
  int totalLoopLength
  int totalWhileLength
  int minimumLinesToComplete // Value representing how many lines are needed to include the specified features
}

// Position-dependent features, fixed number of features
data PDFixed extends FeatureVector {

}

data LineInfo {
  int linesRemaining
}

interface FeatureBuilder {

  PIFixed getNewFeatureVector()

  void setMaxDeviation(int _maxDeviation)

  void setProvidedFeatures(PIFixed _providedFeatures)

  void setFunctionData(FunctionData functionData)

  /* get a new PIFixed feature vector for the current feature vector (of a node) plus the new line. */
  /* FeatureVector updateFeatureVector(FeatureVector current, String newLine) */
  PIFixed updateFeatureVector(PIFixed currentFeatures, int lineType, char newLine[], int subLinesCount, int decType, int asmtType) // Pass the new node, which contains the feature vector, the new line, and all information for the operation

  bool rejectEarly(PIFixed currentFeatures, int linesRemaining)

  bool programHasMinimumFeatures(PIFixed features, int linesRemaining)

  bool isProgramSimilar(PIFixed features, int linesRemaining)

  bool areFeaturesReachable(PIFixed current, bool declarationsComplete, int linesRemaining)

  bool hasMinLinesToCompleteFeatures(PIFixed current, int linesRemaining)

}
